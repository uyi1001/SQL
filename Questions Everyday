--8.10
Write a query to identify the names of users who placed less than 3 orders or ordered less than $500 worth of product.
Example:
Input:
transactions table
Column            Type
id                INT
user_id           INT
created_at        Datetime
product_id        INT
quantity          INT

users table
Column            Type
id                INT
name              VARCHAR
sex               VARCHAR

products table
Column            Type
id                INT
name              VARCHAR
price             FLT

Output:
Column            Type
users_less_than   VARCHAR

Query:
select distinct(user_name) as users_less_than
from (
  select u.name user_name, count(t.id) tx_count, SUM(quantity*price) total_prod_worth
  from users u
  left join transactions t on u.id = t.user_id
  left join kproducts p on t.product_id = p.id
  group by user_name) sub
where tx_count<3 or total_prod_worth < 500;

--用现有sql_store的数据：
--quantity相关信息在order_items表格上，如果按上面方法，会根据order_items中order_id的出现个数筛选结果

--用union：
select distinct(customer_name) from(
select o.customer_id, c.first_name as customer_name, sum(oi.quantity*unit_price) as total_order
from orders o
join order_items oi
using (order_id)
join customers c
using (customer_id)
group by o.customer_id
having total_order < 80
union
select o.customer_id, c.first_name, count(o.order_id) as order_count from orders o
join customers c using (customer_id)
group by o.customer_id
having order_count > 1) as customer_filter;

--用sub-subquery：
select distinct (first_name) from (
select customer_id, c.first_name, count(customer_id) as order_number, sum(order_total) as total_order_amount from(
select o.order_id as order_id, sum(oi.quantity*unit_price) as order_total, o.customer_id as customer_id from orders o
join order_items oi
using (order_id)
group by o.order_id) as order_summary
join customers c
using (customer_id)
group by customer_id
order by customer_id) as sub
where order_number >1 or total_order_amount < 80;


--8.12
We're given two tables. friend_requests holds all the friend requests made and friend_accepts is all of the acceptances.
Write a query to find the overall acceptance rate of friend requests.
Note: Round results to 4 decimal places.

Example:
Input:
friend_requests table
Column            Type
requester_id      INT
requested_id      INT
created_at        DATETIME

friend_accepts table
Column            Type
accpetor_id       INT
requester_id      INT
created_at        DATETIME

Output:
Column            Type
acceptance_rate   FLT


Query:
Select cast( count(a.accetor_id)/count(r.requester_id) as decimal(5,4) ) as acceptance_rate
from friend_requests r
left join friend_accepts a
on r.requester_id = a.requester_id and requested_id = accpetor_id


--8.15
Write a query that creates an attribution rule for each user. If the user visited Facebook or Google at least onece then the attribution is labeled as "paid".
Otherwise, the attribution is labeled as "organic".

Example:
Input:
user_sessions table
Column            Type
created_at        DATETIME
session_id        INT
user_id           INT

attribution table
Column            Type
session_id        INT
channel           VARCHAR

Output:
Column            Type
user_id           INT
attribute         VARCHAR

Query:
With tempr as(
  select
    user_id,
    sum(case when( channel = 'Facebook' or channel = 'Google') then 1 else 0 end) as paid_count
    from user_sessions u
      join attribution a
      using (session_id)
    group by user_id)

Select user_id, case when paid_count >= 1 then 'paid' else 'organic' end as attribute
from tempr

