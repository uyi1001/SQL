select current_user() as Username;

-- just example, don't have the permission
-- Create Schema
DROP SCHEMA IF EXISTS da_odl_user_696266_6788_dawd_schema CASCADE;
CREATE SCHEMA IF NOT EXISTS da_odl_user_696266_6788_dawd_schema;
DESCRIBE SCHEMA EXTENDED da_odl_user_696266_6788_dawd_schema;

-- Create Table (managed table)
USE da_odl_user_696266_6788_dawd;
CREATE OR REPLACE TABLE managed_table (width INT, length INT, height INT) USING DELTA;
-- optional 'using delta', delta is the default
INSERT INTO managed_table VALUES (3, 2, 1);
SELECT * FROM managed_table;

-- View Table Information
USE da_odl_user_696266_6788_dawd;
DESCRIBE EXTENDED managed_table;
-- 'describe extended' can only be used to view tables or views information

-- DROP the Table
USE da_odl_user_696266_6788_dawd;
DROP TABLE IF EXISTS managed_table;

-- Create Table (external table)
USE da_odl_user_696266_6788_dawd;
CREATE TABLE external_table
    LOCATION 'wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/sales';
SELECT * FROM external_table;

-- View Table Information
USE da_odl_user_696266_6788_dawd;
DESCRIBE EXTENDED external_table;

-- DROP the Table
USE da_odl_user_696266_6788_dawd;
DROP TABLE IF EXISTS external_table;

-- Dropping External Tables Does Not Delete Data
-- The data files located in this location can be queried directly
SELECT * FROM delta.`wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/sales`;
DESCRIBE EXTENDED delta.`wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/sales`;

-- Views
USE da_odl_user_696266_6788_dawd;
CREATE OR REPLACE VIEW high_sales AS
    SELECT * FROM delta.`wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/sales` 
        WHERE total_price > 10000;
SELECT * FROM high_sales;

-- Common Table Expressions
USE da_odl_user_696266_6788_dawd;
WITH sales_below_20000 AS
    (SELECT *
     FROM high_sales
     WHERE total_price < 20000)
    SELECT DISTINCT customer_name FROM sales_below_20000;
    
-- practice D1
USE da_odl_user_696266_6788_dawd;
DROP TABLE IF EXISTS sales_external;
CREATE TABLE sales_external USING DELTA
    LOCATION 'wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/sales/';
SELECT * FROM sales_external ORDER BY customer_id;

USE da_odl_user_696266_6788_dawd;
CREATE TABLE sales USING DELTA AS
    SELECT * FROM sales_external;
DESCRIBE EXTENDED sales;

USE da_odl_user_696266_6788_dawd;
DROP TABLE sales_external;
DESCRIBE EXTENDED sales_external;

-- Ingesting Data
USE da_odl_user_696266_6788_dawd;
DROP TABLE IF EXISTS web_events_csv;
CREATE TABLE web_events_csv 
    USING csv 
    OPTIONS (
        path='wasb://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/web_events/web-events.csv',
        header="true",
        inferSchema="true"
    );
/* Set three options:
path - the path to the object store
header - whether or not the .csv file contains a header row
inferSchema - whether or not Databricks should infer the schema from the contents of the file */
-- the first table is an external csv
DROP TABLE IF EXISTS web_events;
CREATE OR REPLACE TABLE web_events AS
    SELECT * FROM web_events_csv;
-- Create a second table in Delta format for most options.
-- the second table is a managed delta


USE da_odl_user_696266_6788_dawd;
DROP TABLE IF EXISTS test222;
CREATE TABLE test222
    LOCATION 'wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/gym-logs';
SELECT * FROM test222;

-- 314 records
select * from json.`wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/gym-logs`;

-- Copy Into
USE da_odl_user_696266_6788_dawd;
DROP TABLE IF EXISTS gym_logs;
CREATE TABLE gym_logs (first_timestamp DOUBLE, gym Long, last_timestamp DOUBLE, mac STRING);
/* The second command copies data from an object store location into the gym_logs table.
Note that the file type for the files in the object store location is specified as "JSON".
The last part of the COPY INTO command is a file name, a list of file names, or a directory of files. */
COPY INTO gym_logs 
    FROM 'wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/gym-logs'
    FILEFORMAT = JSON
    FILES = ('20191201_2.json');

USE da_odl_user_696266_6788_dawd;
SELECT * FROM gym_logs;
-- three records

/* We can run the same COPY INTO command as above and add a second one.
The first one will be skipped because the file has already been loaded. */
USE da_odl_user_696266_6788_dawd;
COPY INTO gym_logs 
    FROM 'wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/gym-logs'
    FILEFORMAT = JSON
    FILES = ('20191201_2.json');
COPY INTO gym_logs
    FROM 'wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/gym-logs'
    FILEFORMAT = JSON
    FILES = ('20191201_3.json');

USE da_odl_user_696266_6788_dawd;
SELECT count(*) FROM gym_logs;
-- added 2 rows from '20191201_03.json', now there are 5 records

USE da_odl_user_696266_6788_dawd;
-- these tow 'copy into' will be skipped
COPY INTO gym_logs 
    FROM 'wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/gym-logs'
    FILEFORMAT = JSON
    FILES = ('20191201_2.json');
COPY INTO gym_logs
    FROM 'wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/gym-logs'
    FILEFORMAT = JSON
    FILES = ('20191201_3.json');
-- The PATTERN option allows us to load any file that fits a specific pattern.
COPY INTO gym_logs 
    FROM 'wasbs://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/gym-logs'
    FILEFORMAT = JSON
    PATTERN = '20191201_[0-9].json';

USE da_odl_user_696266_6788_dawd;
select * from gym_logs;

-- Privileges (easier using Data Explorer)
SHOW GRANT ON SCHEMA da_odl_user_696266_6788_dawd;

-- GRANT
GRANT USAGE ON SCHEMA da_odl_user_696266_6788_dawd TO `odl_user_696266@databrickslabs.com`;
GRANT SELECT ON SCHEMA da_odl_user_696266_6788_dawd TO `users`;

-- REVOKE
REVOKE SELECT ON SCHEMA da_odl_user_696266_6788_dawd from `users`;

-- practice D2
USE da_odl_user_696266_6788_dawd;
DROP TABLE IF EXISTS customers_csv;
CREATE TABLE customers_csv 
    USING csv 
    OPTIONS (
        path='wasb://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/customers/customers.csv',
        header="true",
        inferSchema="true"
);
CREATE OR REPLACE TABLE customers AS
    SELECT * FROM customers_csv;
DROP TABLE customers_csv;
SELECT * FROM customers;
SELECT count(*) FROM customers;

USE da_odl_user_696266_6788_dawd;
CREATE OR REPLACE TABLE sales_stream (5minutes STRING, 
                                         clicked_items ARRAY<ARRAY<STRING>>, 
                                         customer_id STRING, 
                                         customer_name STRING, 
                                         datetime STRING, 
                                         hour BIGINT, 
                                         minute BIGINT, 
                                         number_of_line_items STRING, 
                                         order_datetime STRING, 
                                         order_number BIGINT, 
                                         ordered_products ARRAY<ARRAY<STRING>>, 
                                         sales_person DOUBLE, 
                                         ship_to_address STRING
);
COPY INTO sales_stream 
    FROM 'wasb://courseware@dbacademy.blob.core.windows.net/data-analysis-with-databricks/v01/sales_stream.json'
    FILEFORMAT = JSON;
SELECT * FROM sales_stream ORDER BY customer_id;

USE da_odl_user_696266_6788_dawd;
GRANT SELECT ON TABLE `sales_stream` TO `users`;
SHOW GRANT ON `sales_stream`;
REVOKE SELECT ON TABLE `sales_stream` from `users`;

-- To check the history version
USE da_odl_user_696266_6788_dawd;
DESCRIBE HISTORY customers;

-- Update the table and change back, check history again
USE da_odl_user_696266_6788_dawd;
UPDATE customers SET loyalty_segment = 10 WHERE loyalty_segment = 0;
DESCRIBE HISTORY customers;

USE da_odl_user_696266_6788_dawd;
UPDATE customers SET loyalty_segment = 0 WHERE loyalty_segment = 10;
DESCRIBE HISTORY customers;

-- Time travel, select info from the version selected
USE da_odl_user_696266_6788_dawd;
SELECT loyalty_segment FROM customers VERSION AS OF 1;

-- Merge into
-- Insert new data without already matched data
-- Copy into will skip existing rows but merge into will skip on matched record
USE da_odl_user_696266_6788_dawd;
MERGE INTO suppliers
    USING source_suppliers
    ON suppliers.SUPPLIER_ID = source_suppliers.SUPPLIER_ID
    WHEN NOT MATCHED THEN INSERT *;
SELECT count(*) FROM suppliers;

-- Lowercase every letter of city
USE da_odl_user_696266_6788_dawd;
SELECT lower(city) AS City FROM customers;

-- lowercase the letters then capitalize the first one
USE da_odl_user_696266_6788_dawd;
SELECT initcap(lower(city)) AS City FROM customers;

-- date setting
USE da_odl_user_696266_6788_dawd;
SELECT from_unixtime(promo_began, 'd MMM, y') AS Beginning_Date FROM promo_prices;

-- date calculation
USE da_odl_user_696266_6788_dawd;
SELECT current_date() - to_date(from_unixtime(promo_began)) FROM promo_prices;

-- Case... When
USE da_odl_user_696266_6788_dawd;
SELECT customer_name, loyalty_segment,
    CASE 
        WHEN loyalty_segment = 0 THEN 'Rare'
        WHEN loyalty_segment = 1 THEN 'Occasional'
        WHEN loyalty_segment = 2 THEN 'Frequent'
        WHEN loyalty_segment = 3 THEN 'Daily'
    END AS Loyalty 
FROM customers;

-- Update table
USE da_odl_user_696266_6788_dawd;
UPDATE customers SET city = initcap(lower(city));
SELECT city FROM customers;

-- Insert single row into a table
USE da_odl_user_696266_6788_dawd;
INSERT INTO loyalty_segments 
    (loyalty_segment_id, loyalty_segment_description, unit_threshold, valid_from, valid_to)
    VALUES
    (4, 'level_4', 100, current_date(), Null);
SELECT * FROM loyalty_segments;

-- Insert an entire table despite duplication
USE da_odl_user_696266_6788_dawd;
INSERT INTO suppliers TABLE source_suppliers;
SELECT * FROM suppliers;

-- Insert overwrite, replaced all the rows
USE da_odl_user_696266_6788_dawd;
INSERT OVERWRITE suppliers TABLE source_suppliers;
SELECT * FROM suppliers;

-- Main: create table as, sub: select from
USE da_odl_user_696266_6788_dawd;
CREATE OR REPLACE TABLE high_loyalty_customers AS
    SELECT * FROM customers WHERE loyalty_segment = 3;
CREATE OR REPLACE TABLE low_loyalty_customers AS
    SELECT * FROM customers WHERE loyalty_segment = 1;

-- Intersection between customers and loyalty_segments on loyalty_segment
USE da_odl_user_696266_6788_dawd;
SELECT
        customer_name,
        loyalty_segment_description,
        unit_threshold
    FROM
        customers
    INNER JOIN loyalty_segments
        ON customers.loyalty_segment = loyalty_segments.loyalty_segment_id;

-- Cross Join
USE da_odl_user_696266_6788_dawd;
SELECT
  "Sales", count(*)
FROM
  sales
UNION ALL
SELECT
  "Customers", count(*)
FROM
  customers
UNION ALL
SELECT
  "Crossed", count(*)
FROM
  customers
  CROSS JOIN sales;

-- Aggregations
USE da_odl_user_696266_6788_dawd;
SELECT 
        "Sum" Function_Name, sum(units_purchased) AS Value
    FROM customers 
    WHERE state = 'CA'
UNION ALL
SELECT 
        "Min", min(discounted_price) AS Lowest_Discounted_Price 
    FROM promo_prices
UNION ALL
SELECT 
        "Max", max(discounted_price) AS Highest_Discounted_Price 
    FROM promo_prices
UNION ALL
SELECT 
        "Avg", avg(total_price) AS Mean_Total_Price 
    FROM sales
UNION ALL
SELECT 
        "Standard Deviation", std(total_price) AS SD_Total_Price 
    FROM sales
UNION ALL
SELECT 
        "Variance", variance(total_price) AS Variance_Total_Price
        FROM sales;
